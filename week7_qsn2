#include <stdio.h>

#define MAX 10


void roundRobin(int processes[], int n, int burst_time[], int quantum) {
    int waiting_time[MAX], turnaround_time[MAX];
    int remaining_bt[MAX];  
    int time = 0, i;

    for (i = 0; i < n; i++) {
        remaining_bt[i] = burst_time[i];
    }

    while (1) {
        int done = 1;
        
        for (i = 0; i < n; i++) {
            if (remaining_bt[i] > 0) {
                done = 0;  

                if (remaining_bt[i] > quantum) {
                    time += quantum;
                    remaining_bt[i] -= quantum;
                } else {
                    time += remaining_bt[i];
                    waiting_time[i] = time - burst_time[i];
                    remaining_bt[i] = 0;
                }
            }
        }

        if (done == 1)
            break;
    }

    for (i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
    }

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burst_time[i], waiting_time[i], turnaround_time[i]);
    }
}

int main() {
    int processes[] = {1, 2, 3, 4};
    int n = sizeof(processes) / sizeof(processes[0]);

    int burst_time[] = {5, 8, 12, 6};  // Burst times of processes
    int quantum = 4;  // Time quantum

    roundRobin(processes, n, burst_time, quantum);
    return 0;
}
